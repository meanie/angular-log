{"version":3,"sources":["log.service.js","meanie-angular-log.min.js"],"names":["window","angular","undefined","module","provider","this","disabled","enabled","disable","methods","enable","$get","$window","isEnabled","method","isArray","indexOf","formatError","arg","Error","stack","message","sourceURL","line","logger","noop","console","logFn","log","hasApply","apply","e","args","forEach","arguments","push","arg1","arg2","info","warn","error","debug","assert","clear","trace","dir"],"mappings":"CAOA,SAAAA,EAAAC,EAAAC,GAAA,YAKAD,GAAAE,OAAA,kBAKAC,SAAA,OAAA,WAGAC,KAAAC,SAAA,KACAD,KAAAE,QAAA,KAKAF,KAAAG,QAAA,SAAAC,GACA,gBAAAA,KACAA,GAAAA,IAEAJ,KAAAC,SAAAG,EACAJ,KAAAE,QAAA,MAMAF,KAAAK,OAAA,SAAAD,GACA,gBAAAA,KACAA,GAAAA,IAEAJ,KAAAE,QAAAE,EACAJ,KAAAC,SAAA,MAMAD,KAAAM,MAAA,UAAA,SAAAC,GASA,QAAAC,GAAAC,GAGA,MAAAb,GAAAc,QAAAR,GACA,KAAAA,EAAAS,QAAA,QAAA,KAAAT,EAAAS,QAAAF,IACA,GAEA,EAIAb,EAAAc,QAAAT,IACAA,EAAAU,SAAA,IACA,GAMA,EAMA,QAAAC,GAAAC,GAUA,MATAA,aAAAC,SACAD,EAAAE,MACAF,EAAAA,EAAAG,SAAA,KAAAH,EAAAE,MAAAJ,QAAAE,EAAAG,SACA,UAAAH,EAAAG,QAAA,KAAAH,EAAAE,MAAAF,EAAAE,MAEAF,EAAAI,YACAJ,EAAAA,EAAAG,QAAA,KAAAH,EAAAI,UAAA,IAAAJ,EAAAK,OAGAL,EAMA,QAAAM,GAAAV,GAGA,IAAAD,EAAAC,GACA,MAAAb,GAAAwB,IAIA,IAAAC,GAAAd,EAAAc,YACAC,EAAAD,EAAAZ,IAAAY,EAAAE,KAAA3B,EAAAwB,KACAI,GAAA,CAIA,KACAA,IAAAF,EAAAG,MACA,MAAAC,IAGA,MAAAF,GACA,WACA,GAAAG,KAIA,OAHA/B,GAAAgC,QAAAC,UAAA,SAAAhB,GACAc,EAAAG,KAAAlB,EAAAC,MAEAS,EAAAG,MAAAJ,EAAAM,IAMA,SAAAI,EAAAC,GACAV,EAAAS,EAAA,OAAAC,EAAA,GAAAA,IA/EA,GAAA9B,GAAAF,KAAAE,QACAD,EAAAD,KAAAC,QAmFA,QACAsB,IAAAJ,EAAA,OACAc,KAAAd,EAAA,QACAe,KAAAf,EAAA,QACAgB,MAAAhB,EAAA,SACAiB,MAAAjB,EAAA,SACAkB,OAAAlB,EAAA,UACAmB,MAAAnB,EAAA,SACAoB,MAAApB,EAAA,SCCMqB,IAAKrB,EAAO,aAKfxB,OAAQA,OAAOC","file":"meanie-angular-log.min.js","sourcesContent":["(function (window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Log.Service', [])\n\n/**\n * Provider definition\n */\n.provider('$log', function $logProvider() {\n\n  //Disabled/enabled log methods\n  this.disabled = null;\n  this.enabled = null;\n\n  /**\n   * Set disabled log methods\n   */\n  this.disable = function(methods) {\n    if (typeof methods === 'string') {\n      methods = [methods];\n    }\n    this.disabled = methods;\n    this.enabled = null;\n  };\n\n  /**\n   * Set enabled log methods\n   */\n  this.enable = function(methods) {\n    if (typeof methods === 'string') {\n      methods = [methods];\n    }\n    this.enabled = methods;\n    this.disabled = null;\n  };\n\n  /**\n   * Service getter\n   */\n  this.$get = ['$window', function($window) {\n\n    //Get enabled/disabled log methods\n    var enabled = this.enabled;\n    var disabled = this.disabled;\n\n    /**\n     * Helper to check if a method is enabled\n     */\n    function isEnabled(method) {\n\n      //Enabled methods specified?\n      if (angular.isArray(enabled)) {\n        if (enabled.indexOf('all') !== -1 || enabled.indexOf(method) !== -1) {\n          return true;\n        }\n        return false;\n      }\n\n      //Disabled methods specified?\n      if (angular.isArray(disabled)) {\n        if (disabled.indexOf('all' !== -1 || disabled.indexOf(method) !== -1)) {\n          return false;\n        }\n        return true;\n      }\n\n      //Otherwise, allowed\n      return true;\n    }\n\n    /**\n     * Helper to format error\n     */\n    function formatError(arg) {\n      if (arg instanceof Error) {\n        if (arg.stack) {\n          arg = (arg.message && arg.stack.indexOf(arg.message) === -1) ?\n                'Error: ' + arg.message + '\\n' + arg.stack : arg.stack;\n        }\n        else if (arg.sourceURL) {\n          arg = arg.message + '\\n' + arg.sourceURL + ':' + arg.line;\n        }\n      }\n      return arg;\n    }\n\n    /**\n     * Get logger function\n     */\n    function logger(method) {\n\n      //Not enabled?\n      if (!isEnabled(method)) {\n        return angular.noop;\n      }\n\n      //Get console and log function\n      var console = $window.console || {};\n      var logFn = console[method] || console.log || angular.noop;\n      var hasApply = false;\n\n      //Note: reading logFn.apply throws an error in IE11 in IE8 document mode.\n      //The reason behind this is that console.log has type \"object\" in IE8...\n      try {\n        hasApply = !!logFn.apply;\n      } catch (e) {}\n\n      //Function present\n      if (hasApply) {\n        return function() {\n          var args = [];\n          angular.forEach(arguments, function(arg) {\n            args.push(formatError(arg));\n          });\n          return logFn.apply(console, args);\n        };\n      }\n\n      //We are IE which either doesn't have window.console => this is noop and we do nothing,\n      //or we are IE where console.log doesn't have apply so we log at least first 2 args\n      return function(arg1, arg2) {\n        logFn(arg1, arg2 === null ? '' : arg2);\n      };\n    }\n\n    //Interface\n    return {\n      log: logger('log'),\n      info: logger('info'),\n      warn: logger('warn'),\n      error: logger('error'),\n      debug: logger('debug'),\n      assert: logger('assert'),\n      clear: logger('clear'),\n      trace: logger('trace'),\n      dir: logger('dir')\n    };\n  }];\n});\n\n})(window, window.angular);\n",null],"sourceRoot":"/source/"}