{"version":3,"sources":["meanie-angular-log.min.js","log.service.js"],"names":["window","angular","undefined","module","provider","this","disabled","enabled","disable","methods","enable","$get","$window","isEnabled","method","isArray","indexOf","formatError","arg","Error","stack","message","sourceURL","line","logger","noop","console","logFn","log","hasApply","apply","e","args","forEach","arguments","push","arg1","arg2","info","warn","error","debug","assert","clear","trace","dir"],"mappings":"CAMA,SAAWA,EAAQC,EAASC,GCD5B,YDQED,GAAQE,OAAO,kBAKdC,SAAS,OAAQ,WCClBC,KAAKC,SAAU,KDGbD,KCFAE,QAAW,KDOXF,KAAKG,QAAU,SAAUC,GACA,gBAAZA,KACTA,GAAWA,IAEbJ,KAAKC,SAAWG,ECDpBJ,KAAKE,QAAS,MDQZF,KAAKK,OAAS,SAAUD,GACC,gBAAZA,KACTA,GAAWA,IAEbJ,KAAKE,QAAUE,ECDnBJ,KAAKC,SAAA,MDQHD,KAAKM,MAAQ,UAAW,SAAUC,GAShC,QAASC,GAAUC,GAGjB,MAAIb,GAAQc,QAAQR,GACdA,EAAQS,QAAQ,aAAiBT,EAAQS,QAAQF,SAOnDb,EAAQc,QAAQT,KACdA,EAASU,SAAQ,GAazB,QAASC,GAAYC,GCQvB,MDPQA,aAAeC,SCCrBD,EAAOE,MDCDF,EAAMA,EAAIG,SAAWH,EAAIE,MAAMJ,QAAQE,EAAIG,cAAkB,UAAYH,EAAIG,QAAU,KAAOH,EAAIE,MAAQF,EAAIE,MACrGF,EAAII,YACbJ,EAAMA,EAAIG,QAAU,KAAOH,EAAII,UAAY,IAAMJ,EAAIK,OCGpDL,EDMP,QAASM,GAAOV,GCGhB,IAAID,EAAQC,GACZ,MAAIb,GAAWwB,IAIf,IAAIC,GAAAd,EAAAc,YACFC,EAAAD,EAAaZ,IAAMY,EAAAE,KAAA3B,EAAAwB,KACnBI,GAAU,CDIV,KACEA,ICAWF,EAAAG,MDCX,MCAAC,IDGF,MCAEF,GDCO,WACL,GAAIG,KCIV,ODHM/B,GAAQgC,QAAQC,UAAW,SAAUhB,GACnCc,EAAKG,KAAKlB,EAAYC,MCEvBS,EAASG,MAAMJ,EAAMM,IAMvB,SAAAI,EAAAC,GACLV,EAAKS,EAAO,OAAAC,EAAA,GAAAA,IA/Ed,GAAA9B,GAASF,KAAUE,QDGbD,EAAWD,KAAKC,QAiFpB,QCCAsB,IAAAJ,EAAO,OACPc,KAAAd,EAAO,QACPe,KAAKf,EAAO,QDCVgB,MAAOhB,EAAO,SACdiB,MAAOjB,EAAO,SACdkB,OAAQlB,EAAO,UCEpBmB,MAAQnB,EAAO,SDAVoB,MAAOpB,EAAO,SACdqB,IAAKrB,EAAO,aAIjBxB,OAAQA,OAAOC","file":"meanie-angular-log.min.js","sourcesContent":["/**\n * meanie-angular-log * https://github.com/meanie/angular-log\n *\n * Copyright (c) 2016 Adam Buczynski <me@adambuczynski.com>\n * License: MIT\n */\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('Log.Service', [])\n\n  /**\n   * Provider definition\n   */\n  .provider('$log', function $logProvider() {\n\n    //Disabled/enabled log methods\n    this.disabled = null;\n    this.enabled = null;\n\n    /**\n     * Set disabled log methods\n     */\n    this.disable = function (methods) {\n      if (typeof methods === 'string') {\n        methods = [methods];\n      }\n      this.disabled = methods;\n      this.enabled = null;\n    };\n\n    /**\n     * Set enabled log methods\n     */\n    this.enable = function (methods) {\n      if (typeof methods === 'string') {\n        methods = [methods];\n      }\n      this.enabled = methods;\n      this.disabled = null;\n    };\n\n    /**\n     * Service getter\n     */\n    this.$get = ['$window', function ($window) {\n\n      //Get enabled/disabled log methods\n      var enabled = this.enabled;\n      var disabled = this.disabled;\n\n      /**\n       * Helper to check if a method is enabled\n       */\n      function isEnabled(method) {\n\n        //Enabled methods specified?\n        if (angular.isArray(enabled)) {\n          if (enabled.indexOf('all') !== -1 || enabled.indexOf(method) !== -1) {\n            return true;\n          }\n          return false;\n        }\n\n        //Disabled methods specified?\n        if (angular.isArray(disabled)) {\n          if (disabled.indexOf('all' !== -1 || disabled.indexOf(method) !== -1)) {\n            return false;\n          }\n          return true;\n        }\n\n        //Otherwise, allowed\n        return true;\n      }\n\n      /**\n       * Helper to format error\n       */\n      function formatError(arg) {\n        if (arg instanceof Error) {\n          if (arg.stack) {\n            arg = arg.message && arg.stack.indexOf(arg.message) === -1 ? 'Error: ' + arg.message + '\\n' + arg.stack : arg.stack;\n          } else if (arg.sourceURL) {\n            arg = arg.message + '\\n' + arg.sourceURL + ':' + arg.line;\n          }\n        }\n        return arg;\n      }\n\n      /**\n       * Get logger function\n       */\n      function logger(method) {\n\n        //Not enabled?\n        if (!isEnabled(method)) {\n          return angular.noop;\n        }\n\n        //Get console and log function\n        var console = $window.console || {};\n        var logFn = console[method] || console.log || angular.noop;\n        var hasApply = false;\n\n        //Note: reading logFn.apply throws an error in IE11 in IE8 document mode.\n        //The reason behind this is that console.log has type \"object\" in IE8...\n        try {\n          hasApply = !!logFn.apply;\n        } catch (e) {}\n\n        //Function present\n        if (hasApply) {\n          return function () {\n            var args = [];\n            angular.forEach(arguments, function (arg) {\n              args.push(formatError(arg));\n            });\n            return logFn.apply(console, args);\n          };\n        }\n\n        //We are IE which either doesn't have window.console => this is noop and we do nothing,\n        //or we are IE where console.log doesn't have apply so we log at least first 2 args\n        return function (arg1, arg2) {\n          logFn(arg1, arg2 === null ? '' : arg2);\n        };\n      }\n\n      //Interface\n      return {\n        log: logger('log'),\n        info: logger('info'),\n        warn: logger('warn'),\n        error: logger('error'),\n        debug: logger('debug'),\n        assert: logger('assert'),\n        clear: logger('clear'),\n        trace: logger('trace'),\n        dir: logger('dir')\n      };\n    }];\n  });\n})(window, window.angular);","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Log.Service', [])\n\n/**\n * Provider definition\n */\n.provider('$log', function $logProvider() {\n\n  //Disabled/enabled log methods\n  this.disabled = null;\n  this.enabled = null;\n\n  /**\n   * Set disabled log methods\n   */\n  this.disable = function(methods) {\n    if (typeof methods === 'string') {\n      methods = [methods];\n    }\n    this.disabled = methods;\n    this.enabled = null;\n  };\n\n  /**\n   * Set enabled log methods\n   */\n  this.enable = function(methods) {\n    if (typeof methods === 'string') {\n      methods = [methods];\n    }\n    this.enabled = methods;\n    this.disabled = null;\n  };\n\n  /**\n   * Service getter\n   */\n  this.$get = function($window) {\n\n    //Get enabled/disabled log methods\n    var enabled = this.enabled;\n    var disabled = this.disabled;\n\n    /**\n     * Helper to check if a method is enabled\n     */\n    function isEnabled(method) {\n\n      //Enabled methods specified?\n      if (angular.isArray(enabled)) {\n        if (enabled.indexOf('all') !== -1 || enabled.indexOf(method) !== -1) {\n          return true;\n        }\n        return false;\n      }\n\n      //Disabled methods specified?\n      if (angular.isArray(disabled)) {\n        if (disabled.indexOf('all' !== -1 || disabled.indexOf(method) !== -1)) {\n          return false;\n        }\n        return true;\n      }\n\n      //Otherwise, allowed\n      return true;\n    }\n\n    /**\n     * Helper to format error\n     */\n    function formatError(arg) {\n      if (arg instanceof Error) {\n        if (arg.stack) {\n          arg = (arg.message && arg.stack.indexOf(arg.message) === -1) ?\n                'Error: ' + arg.message + '\\n' + arg.stack : arg.stack;\n        }\n        else if (arg.sourceURL) {\n          arg = arg.message + '\\n' + arg.sourceURL + ':' + arg.line;\n        }\n      }\n      return arg;\n    }\n\n    /**\n     * Get logger function\n     */\n    function logger(method) {\n\n      //Not enabled?\n      if (!isEnabled(method)) {\n        return angular.noop;\n      }\n\n      //Get console and log function\n      var console = $window.console || {};\n      var logFn = console[method] || console.log || angular.noop;\n      var hasApply = false;\n\n      //Note: reading logFn.apply throws an error in IE11 in IE8 document mode.\n      //The reason behind this is that console.log has type \"object\" in IE8...\n      try {\n        hasApply = !!logFn.apply;\n      } catch (e) {}\n\n      //Function present\n      if (hasApply) {\n        return function() {\n          var args = [];\n          angular.forEach(arguments, function(arg) {\n            args.push(formatError(arg));\n          });\n          return logFn.apply(console, args);\n        };\n      }\n\n      //We are IE which either doesn't have window.console => this is noop and we do nothing,\n      //or we are IE where console.log doesn't have apply so we log at least first 2 args\n      return function(arg1, arg2) {\n        logFn(arg1, arg2 === null ? '' : arg2);\n      };\n    }\n\n    //Interface\n    return {\n      log: logger('log'),\n      info: logger('info'),\n      warn: logger('warn'),\n      error: logger('error'),\n      debug: logger('debug'),\n      assert: logger('assert'),\n      clear: logger('clear'),\n      trace: logger('trace'),\n      dir: logger('dir')\n    };\n  };\n});\n\n})(window, window.angular);\n"],"sourceRoot":"/source/"}