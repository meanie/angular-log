{"version":3,"sources":["log.service.js"],"names":["angular","this","disable","enabled","methods","enable","$get","isEnabled","method","arg","logger","console","hasApply","noop","$window","logFn","apply","e","args","arg1","arg2","log","assert","clear","trace","dir","window"],"mappings":"aAKAA,mEAcEC,KAAKC,SAAU,UACbC,QAAWC,0EAUbH,KAAKI,QAAS,yEAWdJ,KAAKK,SAAAA,uCASH,IAAAH,EAASI,KAAUC,sCAyCnB,4BANEC,EAAOA,oJAMAC,gBASP,KAAYC,yFACZ,OAAIC,EAAWC,WAIXF,EAAAG,EAAAH,SAAA,GACFC,EAAAA,EAAaG,IAAMC,EAAAA,KAAAA,EAAAA,KAErBJ,GAAU,MAKVA,IAAcG,EAAAC,MACZ,MAAOC,WACLC,EACA,+GAaC,SAAAC,EAAAC,GACLC,EAAKX,EAAO,OAAAU,EAAA,GAAAA,UAKZE,CACAC,IAAAA,EAAOb,OACPc,KAAAA,EAAOd,QACPe,KAAKf,EAAO,6DAKfgB,MAAQA,EAAO1B","file":"angular-log.min.js","sourcesContent":["(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Log.Service', [])\n\n/**\n * Provider definition\n */\n.provider('$log', function $logProvider() {\n\n  //Disabled/enabled log methods\n  this.disabled = null;\n  this.enabled = null;\n\n  /**\n   * Set disabled log methods\n   */\n  this.disable = function(methods) {\n    if (typeof methods === 'string') {\n      methods = [methods];\n    }\n    this.disabled = methods;\n    this.enabled = null;\n  };\n\n  /**\n   * Set enabled log methods\n   */\n  this.enable = function(methods) {\n    if (typeof methods === 'string') {\n      methods = [methods];\n    }\n    this.enabled = methods;\n    this.disabled = null;\n  };\n\n  /**\n   * Service getter\n   */\n  this.$get = function($window) {\n\n    //Get enabled/disabled log methods\n    let enabled = this.enabled;\n    let disabled = this.disabled;\n\n    /**\n     * Helper to check if a method is enabled\n     */\n    function isEnabled(method) {\n\n      //Enabled methods specified?\n      if (angular.isArray(enabled)) {\n        if (enabled.indexOf('all') !== -1 || enabled.indexOf(method) !== -1) {\n          return true;\n        }\n        return false;\n      }\n\n      //Disabled methods specified?\n      if (angular.isArray(disabled)) {\n        if (disabled.indexOf('all' !== -1 || disabled.indexOf(method) !== -1)) {\n          return false;\n        }\n        return true;\n      }\n\n      //Otherwise, allowed\n      return true;\n    }\n\n    /**\n     * Helper to format error\n     */\n    function formatError(arg) {\n      if (arg instanceof Error) {\n        if (arg.stack) {\n          arg = (arg.message && arg.stack.indexOf(arg.message) === -1) ?\n                'Error: ' + arg.message + '\\n' + arg.stack : arg.stack;\n        }\n        else if (arg.sourceURL) {\n          arg = arg.message + '\\n' + arg.sourceURL + ':' + arg.line;\n        }\n      }\n      return arg;\n    }\n\n    /**\n     * Get logger function\n     */\n    function logger(method) {\n\n      //Not enabled?\n      if (!isEnabled(method)) {\n        return angular.noop;\n      }\n\n      //Get console and log function\n      let console = $window.console || {};\n      let logFn = console[method] || console.log || angular.noop;\n      let hasApply = false;\n\n      //NOTE: reading logFn.apply throws an error in IE11 in IE8 document mode.\n      //The reason behind this is that console.log has type \"object\" in IE8...\n      try {\n        hasApply = !!logFn.apply;\n      }\n      catch (e) {\n        //Noop\n      }\n\n      //Function present\n      if (hasApply) {\n        return function(...args) {\n          args = args.map(formatError);\n          return logFn.apply(console, args);\n        };\n      }\n\n      //We are IE which either doesn't have window.console => this is noop and\n      //we do nothing, or we are IE where console.log doesn't have apply so we\n      //log at least first 2 args\n      return function(arg1, arg2) {\n        logFn(arg1, arg2 === null ? '' : arg2);\n      };\n    }\n\n    //Interface\n    return {\n      log: logger('log'),\n      info: logger('info'),\n      warn: logger('warn'),\n      error: logger('error'),\n      debug: logger('debug'),\n      assert: logger('assert'),\n      clear: logger('clear'),\n      trace: logger('trace'),\n      dir: logger('dir'),\n    };\n  };\n});\n\n})(window, window.angular);\n"]}